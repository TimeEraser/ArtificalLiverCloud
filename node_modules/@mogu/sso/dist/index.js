'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _sso = require('./sso');

var _sso2 = _interopRequireDefault(_sso);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function isStringNotEmpty(obj) {
  return obj !== undefined && obj !== null && obj.length > 0;
}

exports.default = {
  viewCheck: function* (next) {
    const loginResult = yield _sso2.default.ssoLogin(this);
    if (loginResult.isRedirct) {
      this.redirect(loginResult.url);
      return;
    }
    if (isStringNotEmpty(this.query.ticket)) {
      this.redirect('http://' + this.host);
      return;
    }
    if (!this.state.view) {
      this.state.view = {};
    }
    this.state.view.userData = loginResult.data;
    yield next;
  },
  // use for fetch, it will handler result.
  // if use fetch, you need to add {credentials: 'same-origin'} option to let fetch send cookies
  login: function* () {
    const loginResult = yield _sso2.default.ssoLogin(this);
    this.body = loginResult;
  },
  // use for fetch, it will handler result.
  // if use fetch, you need to add {credentials: 'same-origin'} option to let fetch send cookies
  logout: function* () {
    this.body = _sso2.default.ssoLogout(this);
  },
  // use for fetch, it will throw error when user is not login.
  // if use fetch, you need to add {credentials: 'same-origin'} option to let fetch send cookies
  apiCheck: function* (next) {
    const checkResult = yield _sso2.default.ssoCheckUser(this);
    if (checkResult.isLogin) {
      this.state.userData = checkResult;
      yield next;
    } else {
      this.throw('{"message": "请登录后请求"}', 401);
    }
  },
  setEnv: function (env) {
    _sso2.default.setEnv(env);
  }
};
