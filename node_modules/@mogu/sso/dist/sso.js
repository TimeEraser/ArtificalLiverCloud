'use strict';

var crypto = require('crypto');
var querystring = require('querystring');
var http = require('http');
var bignum = require('bignum');

let _api = 'mac.service.mogujie.org';
const _appkey = 'c278d307-4f47-4e19-a18f-1ccf8247e0f6';
const _redirect = 'wt.mogujie.org';
const _domain = '.mogujie.org';
const _maxAge = 9000000; // localhost cookies maxAge

var mogujie = {
  sso_login_url: 'http://mac.mogujie.org/enter'
};

const defaultUserData = {
  isLogin: false,
  domain: '',
  nickName: '',
  workId: ''
};

function isStringNotEmpty(obj) {
  return obj !== undefined && obj !== null && obj.length > 0;
}

function getSecurityKey(ticket, appkey, redirect, ip, time) {
  let md5 = '';
  if (isStringNotEmpty(ticket) && isStringNotEmpty(appkey)) {
    var num1 = bignum(time).shiftRight(4);
    var num2 = time % 100000 + time;
    const timeStr = bignum(num1).and(num2).toString();
    var secret = ticket.substr(0, ticket.length - 1) + appkey.toLowerCase() + redirect + timeStr + ip;
    var md5sum = crypto.createHash('md5');
    md5sum.update(secret);
    md5 = md5sum.digest('hex');
  }
  return md5;
}

mogujie.setEnv = function (env) {
  if (env === 'development') {
    _api = 'mac.mogujie.org';
  }
};

mogujie.authSSO = function (data, callback) {
  const realCallback = typeof callback === 'function' ? callback : function () {};

  var ticket = data.ticket;
  var ticketGlobelCookie = data.ticketGlobelCookie;
  var ip = data.ip ? data.ip : '0.0.0.0';
  var lastLoginTime = Date.parse(new Date());
  var postData = {
    appkey: _appkey,
    redirect: _redirect,
    lastLoginIP: ip,
    lastLoginTime: lastLoginTime,
    securityKey: getSecurityKey(ticket, _appkey, _redirect, ip, lastLoginTime)
  };
  if (isStringNotEmpty(ticket)) {
    postData.ticket = ticket;
  } else if (isStringNotEmpty(ticketGlobelCookie)) {
    postData.ticketGlobelCookie = ticketGlobelCookie;
  } else {
    return realCallback('[ERROR]ticket and ticketGlobalCookie are both null!!', null);
  }

  postData = querystring.stringify(postData);
  var options = {
    host: _api,
    port: 80,
    path: '/appAuth',
    method: 'POST',
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      'Content-Length': Buffer.byteLength(postData)
    }
  };

  var postReq = http.request(options, function (res) {
    res.setEncoding('utf8');
    res.on('data', function (resData) {
      const respone = JSON.parse(resData);
      const allData = respone.data;
      if (respone.code === '200' && allData !== null) {
        var redata = {};
        redata.data = allData.parameter;
        redata.data.isLogin = true;
        redata.ticketGlobelCookie = allData.ticketGlobelCookie;
        realCallback(null, redata);
      } else {
        realCallback('[error]Request failed', null);
      }
    });
  });
  postReq.write(postData);
  postReq.end();
};

mogujie.ssoLogout = function (ctx) {
  const options = {
    signed: false,
    maxAge: 1,
    httpOnly: true,
    overwrite: true
  };
  if (ctx.host.indexOf(_domain) > -1) {
    options.domain = _domain;
  }
  ctx.cookies.set('MTGK', '', options);
  return {
    isRedirct: true,
    url: 'http://' + ctx.host,
    data: defaultUserData
  };
};

mogujie.ssoSetCookie = function (ctx, ticketGlobelCookie) {
  if (ctx.host.indexOf(_domain) < 0) {
    ctx.cookies.set('MTGK', ticketGlobelCookie, {
      signed: false,
      maxAge: _maxAge,
      httpOnly: true,
      overwrite: true
    });
  }
};

mogujie.getRedirctUrl = function (host) {
  var newhost = host ? host : _redirect; // + ctx.url do we need to back
  var redirect = encodeURIComponent('http://' + newhost);
  var loginUrl = mogujie.sso_login_url + '?redirect=' + redirect;
  return loginUrl;
};

mogujie.ssoLogin = function (ctx) {
  var cookies = ctx.cookies;
  var querys = ctx.query;

  var ticketGlobelCookie = cookies.get('MTGK');
  var ticket = querys.ticket;
  var ip = ctx.ip;
  if (ip) {
    ip = ip.split('::ffff:')[1];
  }
  return function (fn) {
    const d = {
      isRedirct: false,
      url: undefined,
      data: undefined
    };
    if (!isStringNotEmpty(ticketGlobelCookie) && !isStringNotEmpty(ticket)) {
      d.isRedirct = true;
      d.url = mogujie.getRedirctUrl(ctx.host);
      fn(null, d);
    } else {
      mogujie.authSSO({
        ticket: ticket,
        ticketGlobelCookie: ticketGlobelCookie,
        ip: ip
      }, function (error, data) {
        if (!error && data !== undefined && data !== null) {
          mogujie.ssoSetCookie(ctx, data.ticketGlobelCookie);
          d.data = data.data;
          fn(null, d);
        } else {
          mogujie.ssoLogout(ctx);
          d.isRedirct = true;
          d.url = mogujie.getRedirctUrl(ctx.host);
          fn(null, d);
        }
      });
    }
  };
};

mogujie.ssoCheckUser = function (ctx) {
  const d = {
    ip: ctx.ip,
    ticket: ctx.query.ticket,
    ticketGlobelCookie: ctx.cookies.get('MTGK')
  };
  return function (fn) {
    if (isStringNotEmpty(d.ticketGlobelCookie) || isStringNotEmpty(d.ticket)) {
      mogujie.authSSO(d, function (err, data) {
        if (!err && data !== undefined && data !== null) {
          mogujie.ssoSetCookie(ctx, data.ticketGlobelCookie);
          fn(null, data.data);
        } else {
          // reset or not...
          // mogujie.ssoLogout(ctx);
          fn(null, defaultUserData);
        }
      });
    } else {
      fn(null, defaultUserData);
    }
  };
};

module.exports = mogujie;
